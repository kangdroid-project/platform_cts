/**
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <jni.h>
#include <log/log.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <utils/String16.h>

using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

bool doExp() {
  const char *codecName = "OMX.google.mp3.decoder";
  IOMX::node_id node = 0;
  int fenceFd = -1;

  int inBufferSize = 2;
  int outBufferSize = 4608;
  sp<IMemory> memory;
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mps = interface_cast<IMediaPlayerService>(binder);

  if (mps == NULL) {
    ALOGE("get media player service failed");
    return false;
  }
  // connect to IOMX each time
  sp<IOMX> service = mps->getOMX();
  if (service == NULL) {
    ALOGE("cannot get the OMX interface");
    return false;
  }

  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  status_t err = service->allocateNode(codecName, observer, NULL, &node);
  if (err != OK) {
    ALOGE("%s node allocation fails", codecName);
    return false;
  }

  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateIdle);
  if (err != OK) {
    ALOGE("sendCommand is failed in 2, err: %d", err);
    service->freeNode(node);
    return false;
  }

  int paramsSize = sizeof(OMX_AUDIO_PARAM_PCMMODETYPE);
  OMX_AUDIO_PARAM_PCMMODETYPE *params = (OMX_AUDIO_PARAM_PCMMODETYPE *)malloc(
      sizeof(OMX_AUDIO_PARAM_PCMMODETYPE));
  if (params == NULL) {
    ALOGE("malloc failed");
    service->freeNode(node);
    return false;
  }
  memset(params, 0, sizeof(OMX_AUDIO_PARAM_PCMMODETYPE));
  params->nPortIndex = 1;
  params->nSize = sizeof(OMX_AUDIO_PARAM_PCMMODETYPE);
  params->nChannels = 32;
  params->nSamplingRate = 44100;

  err = service->setParameter(node, OMX_IndexParamAudioPcm, params, paramsSize);
  ALOGI("setparameter err: %d", err);
  if (err != OK) {
    ALOGE("set parameter error, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }

  IOMX::buffer_id inBufferId = 0;
  sp<MemoryDealer> dealerIn = new MemoryDealer(inBufferSize);
  memory = dealerIn->allocate(inBufferSize);
  if (memory.get() == nullptr || memory->pointer() == nullptr) {
    ALOGE("memory allocate failed for port index 0, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }
  memset(memory->pointer(), 0x01, inBufferSize);
  err = service->useBuffer(node, 0, memory, &inBufferId, inBufferSize);
  ALOGI("useBuffer, port index 0, err: %d", err);
  if (err != OK) {
    ALOGE("useBuffer is failed for input buffer, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }

  IOMX::buffer_id outBufferId = 0;
  sp<MemoryDealer> dealerOut = new MemoryDealer(outBufferSize);
  memory = dealerOut->allocate(outBufferSize);
  if (memory.get() == nullptr || memory->pointer() == nullptr) {
    ALOGE("memory allocate failed for port index 1, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }
  memset(memory->pointer(), 0xff, outBufferSize);
  err = service->useBuffer(node, 1, memory, &outBufferId, outBufferSize);
  ALOGI("useBuffer, port index 1, err: %d", err);
  if (err != OK) {
    ALOGE("useBuffer is failed for output buffer, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }

  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateExecuting);
  if (err != OK) {
    ALOGE("sendCommand is failed in 3, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }

  err = service->emptyBuffer(node, inBufferId, 0, inBufferSize, 1, 0, fenceFd);
  ALOGI("emptyBuffer, err: %d", err);
  if (err != OK) {
    ALOGE("empty buffer failed, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }

  err = service->fillBuffer(node, outBufferId, fenceFd);
  ALOGI("fillBuffer, err: %d", err);
  if (err != OK) {
    ALOGE("fill buffer failed, err: %d", err);
    free(params);
    service->freeNode(node);
    return false;
  }

  free(params);
  err = service->freeNode(node);
  ALOGI("freeNode, err: %d", err);

  return true;
}

int main() { return (int)(!doExp()); }
