/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <jni.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/OMXBuffer.h>
#include <utils/NativeHandle.h>

#define MAX_COUNT 100
using namespace android;

template <class T> static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

protected:
  virtual ~DummyOMXObserver() {}
};

int testAVCDecode() {

  int try_count = MAX_COUNT;
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mps = interface_cast<IMediaPlayerService>(binder);

  if (mps == NULL) {
    ALOGI("get media player service failed");
    return JNI_TRUE;
  }

  while (try_count) {

    const char *codecName = "OMX.qcom.video.decoder.avc.secure";
    // connect to IOMX each time
    sp<IOMX> service = mps->getOMX();

    sp<IOMXNode> mOMXNode;
    sp<DummyOMXObserver> observer = new DummyOMXObserver();
    status_t err = service->allocateNode(codecName, observer, &mOMXNode);
    if (err != OK) {
      ALOGI("%s node allocation fails", codecName);
      return 0;
    }
    // get buffer parameters
    OMX_PARAM_PORTDEFINITIONTYPE def;
    InitOMXParams(&def);
    def.nPortIndex = 0;
    def.nBufferCountActual = 0;
    def.nBufferSize = 0;
    err =
        mOMXNode->getParameter(OMX_IndexParamPortDefinition, &def, sizeof(def));
    ALOGE("port 0: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);

    int inMemSize = def.nBufferCountActual * def.nBufferSize;
    int inBufferCnt = def.nBufferCountActual;
    int inBufferSize = inMemSize / inBufferCnt;

    sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
    IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

    // allocate buffer
    void *buffer_data = NULL;
    IOMX::buffer_id bufferid = 0;
    sp<NativeHandle> native_handle;
    err = mOMXNode->allocateSecureBuffer(0, 4096, &bufferid, &buffer_data,
                                         &native_handle);
    // use buffer
    OMXBuffer omxBuf;
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    err = mOMXNode->useBuffer(0, omxBuf, &inBufferId[1]);
    err = mOMXNode->emptyBuffer(inBufferId[0], omxBuf, 0, 0, 0);
    ALOGI("emptyBuffer, err: %d", err);
    err = mOMXNode->freeNode();
    ALOGI("freeNode, err: %d", err);
    sleep(1);
    try_count = try_count - 1;
  }

  return JNI_TRUE;
}

int main() {
  int ret = testAVCDecode();
  return ret;
}
