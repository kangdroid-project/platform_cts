/**
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <binder/IBinder.h>
#include <binder/IMemory.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/hardware/HardwareAPI.h>
#include <utils/Errors.h>
#include <utils/String16.h>
#include <utils/StrongPointer.h>
#include "OMX_Component.h"

using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}
  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

bool fuzzIOMXQcomVpx() {
  const char *name = "OMX.qcom.video.decoder.vp8";
  IOMX::node_id node = 0;
  int fenceFd = -1;

  int inMemSize = 6230016 * 4;
  int outMemSize = 159744 * 4;
  int inBufferCnt = 4;
  int outBufferCnt = 4;

  int inBufferSize = inMemSize / inBufferCnt;
  int outBufferSize = outMemSize / outBufferCnt;
  sp<IMemory> memory;

  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGI("mediaPlayerService == NULL");
    return false;
  }

  sp<IOMX> service = mediaPlayerService->getOMX();
  if (service == NULL) {
    ALOGI("service == NULL");
    return false;
  }

  sp<DummyOMXObserver> observerDec = new DummyOMXObserver();

  ALOGI("Decoding started......................");
  status_t err = service->allocateNode(name, observerDec, NULL, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", name);
    return false;
  }

  // change state from loaded to idle
  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateIdle);
  if (err != OK) {
    ALOGE("sendCommand is failed in OMX_StateIdle, err: %d", err);
    service->freeNode(node);
    return false;
  }

  // Input
  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id inBufferId = 0;
  for (int i = 0; i < inBufferCnt; i++) {
    memory = dealerIn->allocate(inBufferSize);
    if (memory.get() == nullptr || memory->pointer() == nullptr) {
      ALOGE("memory allocate failed for port index 0, err: %d", err);
      service->freeNode(node);
      return false;
    }
    memset(memory->pointer(), 0xCF, inBufferSize);
    err = service->useBuffer(node, 0, memory, &inBufferId,
                             inBufferSize /*allottedSize*/);
    ALOGI("useBuffer, port index 0, err: %d", err);
    if (err != OK) {
      ALOGE("useBuffer is failed for input buffer, err: %d", err);
      service->freeNode(node);
      return false;
    }
  }

  // Output
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id outBufferId = 0;
  for (int i = 0; i < outBufferCnt; i++) {
    memory = dealerOut->allocate(outBufferSize);
    if (memory.get() == nullptr || memory->pointer() == nullptr) {
      ALOGE("memory allocate failed for port index 1, err: %d", err);
      service->freeNode(node);
      return false;
    }
    err = service->useBuffer(node, 1, memory, &outBufferId, outBufferSize);
    ALOGI("useBuffer 0, port index 1, err: %d", err);
    if (err != OK) {
      ALOGE("useBuffer is failed for output buffer, err: %d", err);
      service->freeNode(node);
      return false;
    }
  }

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateExecuting);
  if (err != OK) {
    ALOGE("sendCommand is failed in OMX_StateExecuting, err: %d", err);
    service->freeNode(node);
    return false;
  }
  /*
   * keep running to check whether mediaserver crashes
   * Error conditions are checked for input/output buffer above. Assuming values
   * passed are valid. If mediaserver doesn't accept, it crashes the media
   * server
   * and considered as fail case. It exits gracefully without error and
   * considered
   * as pass case if evrything goes fine.
   */

  err = service->emptyBuffer(node, inBufferId, 0, inBufferSize, 0, 0, fenceFd);
  ALOGI("emptyBuffer, err: %d", err);

  err = service->fillBuffer(node, outBufferId, fenceFd);
  ALOGI("fillBuffer, err: %d", err);

  err = service->freeNode(node);
  ALOGI("freeNode, err: %d", err);

  return true;
}

int main() { return (int)(!fuzzIOMXQcomVpx()); }
