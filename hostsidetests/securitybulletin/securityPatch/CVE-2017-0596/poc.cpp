/**
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#define _GNU_SOURCE
#include <sys/types.h>
#include <sys/wait.h>
#include <media/IOMX.h>
#include "OMX_IndexExt.h"
#include "OMX_Component.h"
#include "OMX_QCOMExtns.h"
#include <media/hardware/HardwareAPI.h>
#include "gralloc_priv.h"
#include <binder/MemoryDealer.h>
#include <binder/IServiceManager.h>
#include <media/IMediaPlayerService.h>
using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    return false;
  }

  return true;
}

template<class T>
static void InitOMXParams(T *params) {
    params->nSize = sizeof(T);
    params->nVersion.s.nVersionMajor = 1;
    params->nVersion.s.nVersionMinor = 0;
    params->nVersion.s.nRevision = 0;
    params->nVersion.s.nStep = 0;
}

int main() {
  sp<IOMX> service;
  if (connectOMX(service) == false) return 1;

  IOMX::node_id node = 0;
  int fenceFd = -1;
  const char *codecName = "OMX.google.mpeg4.encoder";
  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", codecName);
    return 1;
  }

  {
    /* set mWidth and mHeight */
    int paramsSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);
    OMX_PARAM_PORTDEFINITIONTYPE *params =
        (OMX_PARAM_PORTDEFINITIONTYPE *)malloc(
            sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
    params->nBufferCountActual = 4;
    params->nBufferCountMin = 4;
    params->nPortIndex = 0;  // input
    params->nSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);

    params->format.video.eCompressionFormat = OMX_VIDEO_CodingUnused;
    params->format.video.eColorFormat = OMX_COLOR_FormatYUV420SemiPlanar;

    params->format.video.nFrameWidth = 64;
    params->format.video.nFrameHeight = 64;

    ALOGI("setParameter");
    err = service->setParameter(node, OMX_IndexParamPortDefinition, params,
                                paramsSize);
    ALOGI("setParameter, err: %d", err);
  }

  // get input port parameters
  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  ALOGI("port 0: %u buffers of size %u", def.nBufferCountActual,
        def.nBufferSize);

  // prepare input port buffers
  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;

  // get output port parameters
  InitOMXParams(&def);
  def.nPortIndex = 1;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  ALOGI("port 1: %u buffers of size %u", def.nBufferCountActual,
        def.nBufferSize);

  // prepare output port buffers
  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;
  int outBufferSize = outMemSize / outBufferCnt;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    memset(memory->pointer(), 0xCF, inBufferSize);
    err = service->useBuffer(node, 0, memory, &inBufferId[i],
                             inBufferSize /*allottedSize*/);
    ALOGI("useBuffer 0, port index 0, err: %d", err);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    err = service->useBuffer(node, 1 /*out port index*/, memory,
                             &outBufferId[i], outBufferSize);
    ALOGI("useBuffer, port index 1, err: %d", err);
  }

  // change state from loaded to idle
  err = service->sendCommand(node, OMX_CommandStateSet, 2);
  ALOGI("sendCommand, err: %d", err);

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, 3);
  ALOGI("sendCommand, err: %d", err);

  for (int i = 0; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], 0,
                               0 /*range_length, nFilledLen*/, 0 /*flags*/, 0,
                               fenceFd);
    ALOGI("emptyBuffer, err: %d", err);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    err = service->fillBuffer(node, outBufferId[i], fenceFd);
    ALOGI("fillBuffer, err: %d", err);
  }

  sleep(2);

  // change state from executing to idle
  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateIdle);
  ALOGI("sendCommand, err: %d", err);

  // change state from executing to idle
  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateLoaded);
  ALOGI("sendCommand, err: %d", err);

  for (int i = 0; i < inBufferCnt; i++) {
    err = service->freeBuffer(node, 0, inBufferId[i]);
    ALOGI("freeBuffer port 0, err: %d", err);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    err = service->freeBuffer(node, 1, outBufferId[i]);
    ALOGI("freeBuffer port 1, err: %d", err);
  }

  {
    sleep(2);

    /* set mWidth and mHeight*/
    int paramsSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);
    OMX_PARAM_PORTDEFINITIONTYPE *params =
        (OMX_PARAM_PORTDEFINITIONTYPE *)malloc(
            sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
    params->nBufferCountActual = 4;
    params->nBufferCountMin = 4;
    params->nPortIndex = 0;  // input
    params->nSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);

    params->format.video.eCompressionFormat = OMX_VIDEO_CodingUnused;
    params->format.video.eColorFormat = OMX_COLOR_FormatYUV420SemiPlanar;

    params->format.video.nFrameWidth = 1024;
    params->format.video.nFrameHeight = 1024;

    err = service->setParameter(node, OMX_IndexParamPortDefinition, params,
                                paramsSize);
    ALOGI("setParameter, err: %d", err);

    // get input port parameters
    OMX_PARAM_PORTDEFINITIONTYPE def;
    InitOMXParams(&def);
    def.nPortIndex = 0;
    err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                                sizeof(def));
    ALOGI("port 0: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);

    // prepare input port buffers
    int inMemSize = def.nBufferCountActual * def.nBufferSize;
    int inBufferCnt = def.nBufferCountActual;
    int inBufferSize = inMemSize / inBufferCnt;

    // get output port parameters
    InitOMXParams(&def);
    def.nPortIndex = 1;
    err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                                sizeof(def));
    ALOGI("port 1: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);

    // prepare output port buffers
    int outMemSize = def.nBufferCountActual * def.nBufferSize;
    int outBufferCnt = def.nBufferCountActual;
    int outBufferSize = outMemSize / outBufferCnt;

    sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
    IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

    sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
    IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

    for (int i = 0; i < inBufferCnt; i++) {
      sp<IMemory> memory = dealerIn->allocate(inBufferSize);
      memset(memory->pointer(), 0xCF, inBufferSize);
      err = service->useBuffer(node, 0, memory, &inBufferId[i],
                               inBufferSize /*allottedSize*/);
      ALOGI("useBuffer 0, port index 0, err: %d", err);
    }

    for (int i = 0; i < outBufferCnt; i++) {
      sp<IMemory> memory = dealerOut->allocate(outBufferSize);
      err = service->useBuffer(node, 1 /*out port index*/, memory,
                               &outBufferId[i], outBufferSize);
      ALOGI("useBuffer, port index 1, err: %d", err);
    }

    // change state from loaded to idle
    err = service->sendCommand(node, OMX_CommandStateSet, 2);
    ALOGI("sendCommand, err: %d", err);

    // change state from idle to executing
    err = service->sendCommand(node, OMX_CommandStateSet, 3);
    ALOGI("sendCommand, err: %d", err);

    for (int i = 0; i < inBufferCnt; i++) {
      err = service->emptyBuffer(node, inBufferId[i], 0,
                                 inBufferSize /*range_length, nFilledLen*/,
                                 0 /*flags*/, 0, fenceFd);
      ALOGI("emptyBuffer, err: %d", err);
    }

    for (int i = 0; i < outBufferCnt; i++) {
      err = service->fillBuffer(node, outBufferId[i], fenceFd);
      ALOGI("fillBuffer, err: %d", err);
    }
  }
  err = service->freeNode(node);
  ALOGI("freeNode, err: %d", err);
  return 0;
}
