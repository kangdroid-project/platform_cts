/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <jni.h>
#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>

using namespace android;

template <class T> static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

protected:
  virtual ~DummyOMXObserver() {}
};

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGE("cannot get the media player service");
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    ALOGE("cannot get the OMX  interface");
    return false;
  }

  return true;
}

int testlibOmxVp8dec() {
  const char *codecName = "OMX.google.vp8.decoder";

  // connect to IOMX each time
  sp<IOMX> service;
  if (connectOMX(service) == false)
    return JNI_FALSE;

  IOMX::node_id node = 0;
  int fenceFd = -1;
  IOMX::buffer_id inBufferId = 0;
  IOMX::buffer_id outBufferId = 0;

  List<sp<IMemory>> outQueue;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  status_t err = service->allocateNode(codecName, observer, NULL, &node);
  if (err != OK) {
    ALOGE("%s node allocation fails", codecName);
    return JNI_TRUE;
  }
  OMX_INDEXTYPE omxIndex = OMX_IndexParamPortDefinition;
  int paramsSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);
  OMX_PARAM_PORTDEFINITIONTYPE *params = (OMX_PARAM_PORTDEFINITIONTYPE *)malloc(
      sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
  params->nBufferCountActual = 4;
  params->nBufferCountMin = 4;
  params->nPortIndex = 0;
  params->nSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);

  params->format.video.nFrameWidth = 320;
  params->format.video.nFrameHeight = 240;

  ALOGI("setParameter");
  err = service->setParameter(node, omxIndex, params, paramsSize);
  ALOGI("setParameter, err: %d", err);

  int inMemSize = 4096 * 4096;
  int outMemSize = 1024;
  int bufferCnt = 4;

  int inBufferSize = inMemSize / bufferCnt;
  int outBufferSize = outMemSize / bufferCnt;

  sp<MemoryDealer> dealerOut = new MemoryDealer(1024);

  while (!outQueue.empty()) {
    sp<IMemory> memory = *outQueue.begin();
    err = service->useBuffer(node, 0, memory, &inBufferId,
                             inBufferSize);
    ALOGI("useBuffer 0, port index 0, err: %d", err);
    outQueue.erase(outQueue.begin());
  }

  for (int i = 0; i < bufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);

    err = service->useBuffer(node, 1, memory, &outBufferId, outBufferSize);
    ALOGI("useBuffer 0, port index 1, err: %d", err);
  }
  err = service->sendCommand(node, OMX_CommandStateSet, 2);
  ALOGI("sendCommand, err: %d", err);

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, 3);
  ALOGI("sendCommand, err: %d", err);

  err = service->emptyBuffer(node, inBufferId, 0, inBufferSize, 0, 0, fenceFd);
  ALOGI("emptyBuffer, err: %d", err);

  err = service->fillBuffer(node, outBufferId, fenceFd);

  sleep(1);
  return 1;
}

int main() {
  testlibOmxVp8dec();
  return 0;
}
